(function (global) {
	const DEFAULTS = {
		duration: 4500,
		type: "info",
		title: "",
		message: "",
		icon: null,
		pauseOnHover: true,
		dismissible: true,
		progress: true,
	};

	class EchoToast {
		constructor(root) {
			this.root =
				root ||
				document.querySelector("#echotoast-root") ||
				this._createRoot();
		}

		_createRoot() {
			const r = document.createElement("div");
			r.className = "echotoast-root";
			r.id = "echotoast-root";
			document.body.appendChild(r);
			return r;
		}

		show(options = {}) {
			const o = { ...DEFAULTS, ...options };
			const el = this._render(o);
			this.root.prepend(el);

			// Trigger animation
			requestAnimationFrame(() => el.classList.add("show"));

			// Progress bar animation
			let start = performance.now();
			let rafId;
			const progressBar = el.querySelector(".echotoast-progress > i");

			const tick = (now) => {
				const elapsed = now - start;
				const ratio = Math.max(0, 1 - elapsed / o.duration);
				if (progressBar) progressBar.style.transform = `scaleX(${ratio})`;

				if (el._closed) return;
				if (elapsed >= o.duration) return this._close(el);
				rafId = requestAnimationFrame(tick);
			};
			if (o.duration > 0) rafId = requestAnimationFrame(tick);

			// Pause on hover
			if (o.pauseOnHover) {
				el.addEventListener("mouseenter", () => {
					if (rafId) cancelAnimationFrame(rafId);
					el._pauseTime = performance.now();
				});
				el.addEventListener("mouseleave", () => {
					const pausedFor = performance.now() - (el._pauseTime || 0);
					start += pausedFor;
					rafId = requestAnimationFrame(tick);
				});
			}

			// Click to dismiss
			if (o.dismissible) {
				el.addEventListener("click", (e) => {
					if (!e.target.closest("button")) this._close(el);
				});
			}

			return { el, close: () => this._close(el) };
		}

		_close(el) {
			if (!el || el._closed) return;
			el._closed = true;
			el.classList.remove("show");
			el.classList.add("exit");
			el.addEventListener("animationend", () => el.remove(), { once: true });
		}

		_render(o) {
			const wrap = document.createElement("div");
			wrap.className = `echotoast ${o.type}`;
			wrap.setAttribute("role", "status");

			const iconWrap = document.createElement("div");
			iconWrap.className = "echotoast-icon";
			iconWrap.innerHTML = this._iconFor(o.icon || o.type);

			const meta = document.createElement("div");
			meta.className = "echotoast-meta";
			meta.innerHTML = `
				<div class="echotoast-title">${o.title || o.type}</div>
				<div class="echotoast-message">${o.message || ""}</div>
			`;

			const progress = document.createElement("div");
			progress.className = "echotoast-progress";
			progress.innerHTML = "<i></i>";

			const content = document.createElement("div");
			content.className = "echotoast-content";
			content.append(iconWrap, meta);

			wrap.append(content, progress);

			// Icon animation
			setTimeout(() => {
				const svg = iconWrap.querySelector("svg path");
				if (svg) iconWrap.classList.add("success-anim");
			}, 50);

			return wrap;
		}

		_iconFor(icon) {
			if (!icon) return "";
			switch (icon) {
				case "spinner":
					return '<div class="echotoast-spinner"></div>';
				case "success":
					return `
            <div class="echotoast-pop">
              <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2.4"/>
              </svg>
            </div>`;
				case "info":
					return `
            <div class="echotoast-pop">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 8h.01M11 12h1v4" stroke="currentColor" stroke-width="1.8"/>
                <path d="M21 12A9 9 0 1 1 3 12a9 9 0 0 1 18 0z" stroke="currentColor" stroke-width="1.2" opacity="0.18"/>
              </svg>
            </div>`;
				case "warning":
					return `
            <div class="echotoast-pop">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" stroke="currentColor" stroke-width="1.2"/>
                <path d="M12 9v4" stroke="currentColor" stroke-width="1.6" stroke-linecap="round"/>
                <path d="M12 17h.01" stroke="currentColor" stroke-width="1.6" stroke-linecap="round"/>
              </svg>
            </div>`;
				case "error":
					return `
            <div class="echotoast-pop">
              <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="9" stroke="currentColor" stroke-width="1.8" opacity="0.18"/>
                <path d="M15 9L9 15M9 9l6 6" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
            </div>`;
				default:
					return `<div class="echotoast-pop">${icon}</div>`;
			}
		}
	}

	if (typeof module !== "undefined" && module.exports) {
		module.exports = new EchoToast();
	} else {
		global.EchoToast = new EchoToast();
	}
})(window);
